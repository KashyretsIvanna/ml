{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KashyretsIvanna/ml/blob/main/%D0%9F%D0%A0%D0%9E%D0%93%D0%9D%D0%9E%D0%97%D0%A3%D0%92%D0%90%D0%9D%D0%9D%D0%AF_%D0%9D%D0%90_%D0%9E%D0%A1%D0%9D%D0%9E%D0%92%D0%86_%D0%9A%D0%9B%D0%90%D0%A1%D0%98%D0%A4%D0%86%D0%9A%D0%90%D0%A2%D0%9E%D0%A0%D0%90_%D0%94%D0%95%D0%A0%D0%95%D0%92%D0%90_%D0%A0%D0%86%D0%A8%D0%95%D0%9D%D0%AC_(1).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Лабораторна робота 3**\n",
        "\n",
        "\n",
        "\n",
        "ВИКОРИСТАННЯ ЗГОРТКОВОЇ НЕЙРОННОЇ МЕРЕЖІ CNN\n",
        "ДЛЯ ЗАДАЧІ КЛАСИФІКАЦІЇ ЗОБРАЖЕНЬ\n",
        "\n",
        "Виконала студентка КП-41мп\n",
        "\n",
        "Каширець Іванна\n",
        "\n",
        "2025\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "CvZZFG9eCy80"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Завдання\n",
        "\n",
        "Потрібно використати бібліотеки мови програмування Python для\n",
        "завантаження, дослідження та аналізу набору даних Fashion-MNIST для задачі\n",
        "класифікації зображень. Після цього потрібно провести попередню обробку\n",
        "даних: змінити розміри, масштабувати, перетворити мітки у вектори\n",
        "кодування та розділити дані на навчальні та тестові набори. Зробивши все це,\n",
        "потрібно побудувати модель нейронної мережі CNN. Далі потрібно\n",
        "компілювати, навчити та оцінити побудовану модель, візуалізуючи точність і\n",
        "графіки втрат.\n",
        "\n",
        "Потрібно забезпечити уникнення перенавчання моделі, переглянути\n",
        "свою початкову модель і повторно навчити її. Потрібно оцінити нову модель і\n",
        "порівняти результати обох моделей. Зробіть прогнози на основі даних тесту,\n",
        "перетворіть ймовірності у мітки класів і побудуйте кілька тестових зразків, які\n",
        "модель правильно та неправильно класифікувала. Нарешті, потрібно\n",
        "візуалізувати звіт про класифікацію, який дасть вам більш глибоку\n",
        "інформацію про те, який клас був (не)правильно класифікований моделлю.\n",
        "Дайте відповіді на всі питання, поставені у ході виконання практикуму."
      ],
      "metadata": {
        "id": "ae2Dr7oLzPtO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Реалізація"
      ],
      "metadata": {
        "id": "G31mWl9L6u88"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Проаналізуйте дані"
      ],
      "metadata": {
        "id": "iIOtA02x8BYh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Завантаження даних"
      ],
      "metadata": {
        "id": "5pYT4Vjy6nM0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.datasets import fashion_mnist\n",
        "(train_X,train_Y), (test_X,test_Y) = fashion_mnist.load_data()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iIibZb2Y61eI",
        "outputId": "e4dced9e-0f05-4d7f-9be5-63eb88071699"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "\u001b[1m29515/29515\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "\u001b[1m26421880/26421880\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "\u001b[1m5148/5148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "\u001b[1m4422102/4422102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) Проаналізуйе дані"
      ],
      "metadata": {
        "id": "Kr0R0Kwv7QXQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from keras.utils import to_categorical\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "print('Training data shape : ', train_X.shape, train_Y.shape)\n",
        "print('Testing data shape : ', test_X.shape, test_Y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BuNAau1a7DWM",
        "outputId": "5e483ec5-9bb2-4bbf-c46a-6c383bce8971"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training data shape :  (60000, 28, 28) (60000,)\n",
            "Testing data shape :  (10000, 28, 28) (10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок:\n",
        "\n",
        "Навчальні дані складаються з 60 000 зображень розміром 28 на 28 пікселів. Це означає, що кожне зображення — це сітка з 28 рядків і 28 стовпців пікселів у відтінках сірого. Для кожного з цих зображень є відповідна мітка — одне число від 0 до 9, яке вказує, яка цифра зображена.\n",
        "\n",
        "Тестові дані містять 10 000 подібних зображень і міток. Ці зображення не використовуються в процесі навчання моделі, а натомість застосовуються для перевірки її якості — тобто, як добре модель навчилася розпізнавати цифри, які вона раніше не бачила.\n",
        "\n",
        "Таким чином, розмір навчального набору становить 60 000 зразків, а тестового — 10 000 зразків. Кожен зразок — це окреме зображення цифри у форматі 28×28 пікселів."
      ],
      "metadata": {
        "id": "gDwjFE6s7Sqn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) Знайдіть унікальні номери міток тренувального набору."
      ],
      "metadata": {
        "id": "gmFubZBE7fJn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "classes = np.unique(train_Y)\n",
        "nClasses = len(classes)\n",
        "print('Total number of outputs : ', nClasses)\n",
        "print('Output classes : ', classes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mG6R74P7dRy",
        "outputId": "b604790e-c291-4296-aaef-1fe7c5cf5766"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total number of outputs :  10\n",
            "Output classes :  [0 1 2 3 4 5 6 7 8 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Є десять вихідних класів від 0 до 9."
      ],
      "metadata": {
        "id": "iqFg-nOL7rIj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4) Прогляньте зображення у наборі даних"
      ],
      "metadata": {
        "id": "9m7mLrlx7u8i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=[5,5])\n",
        "# Display the first image in training data\n",
        "plt.subplot(121)\n",
        "plt.imshow(train_X[0,:,:], cmap='gray')\n",
        "plt.title(\"Ground Truth : {}\".format(train_Y[0]))\n",
        "# Display the first image in testing data\n",
        "plt.subplot(122)\n",
        "plt.imshow(test_X[0,:,:], cmap='gray')\n",
        "plt.title(\"Ground Truth : {}\".format(test_Y[0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "id": "csQRor4t7v1D",
        "outputId": "028d04df-4b19-4c86-e842-1c065dcb028a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Ground Truth : 9')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Результати двох вищевказаних графіків виглядають як ботильйони, і\n",
        "цьому класу присвоєно мітку класу 9. Аналогічно, інші продукти будуть мати\n",
        "різні мітки, але подібні продукти будуть мати однакові мітки. Це означає, що\n",
        "усі 7000 зображень ботильйонів будуть мати мітку класу 9."
      ],
      "metadata": {
        "id": "uoqZC2NA72ZJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "IflbCCuR79uY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Попередня обробка даних"
      ],
      "metadata": {
        "id": "JcA18oqw8EVT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) перетворимо кожне зображення тренувального і\n",
        "тестового набору розміром 28x28 у матрицю розміром 28x28x1, яка подається\n",
        "в мережу."
      ],
      "metadata": {
        "id": "5J6F9kBr8HfJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_X = train_X.reshape(-1, 28,28, 1)\n",
        "test_X = test_X.reshape(-1, 28,28, 1)\n",
        "train_X.shape, test_X.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7StWZm568UJF",
        "outputId": "70b59c3b-a1db-45b3-e2a7-327950369a18"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 28, 28, 1), (10000, 28, 28, 1))"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок:Ці зміни означають, що ви додали нову \"канальну\" вісь до кожного зображення. Раніше зображення мали форму (28, 28) — тобто були двовимірними (рядки й стовпці пікселів). Тепер кожне зображення має форму (28, 28, 1), де 1 означає один канал, тобто зображення є одноканальним (чорно-білим).\n",
        "\n",
        "Цей формат є стандартним для подачі зображень у нейронну мережу (зокрема CNN), яка очікує 4-вимірний вхід:\n",
        "(кількість_зразків, висота, ширина, кількість_каналів)\n",
        "\n",
        "Отже:\n",
        "\n",
        "Зберено кількість зразків зразків — 60 000 для навчання та 10 000 для тестування.\n",
        "Самі зображення не змінено, лише додано вимір, який потрібен для сумісності з глибокими нейронними мережами."
      ],
      "metadata": {
        "id": "tkXwouka8WfU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) перетворимо дані в float32"
      ],
      "metadata": {
        "id": "e1R8rBofA1bh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_X = train_X.astype('float32')\n",
        "test_X = test_X.astype('float32')\n",
        "train_X = train_X / 255.\n",
        "test_X = test_X / 255."
      ],
      "metadata": {
        "id": "5QMi5nLCA4B8"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) перетворимо навчальні та тестові мітки у вектори кодування:"
      ],
      "metadata": {
        "id": "cLw9M0bUA7F1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Change the labels from categorical to one-hot encoding\n",
        "train_Y_one_hot = to_categorical(train_Y)\n",
        "test_Y_one_hot = to_categorical(test_Y)\n",
        "# Display the change for category label using one-hot encoding\n",
        "print('Original label:', train_Y[0])\n",
        "print('After conversion to one-hot:', train_Y_one_hot[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rnmpqaXLB6jQ",
        "outputId": "229a30b0-96aa-4cbe-fecd-eed30ad1902a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original label: 9\n",
            "After conversion to one-hot: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Раніше мітки класів (тобто правильні відповіді для кожного зображення) були представлені як цілі числа від 0 до 9. Наприклад, мітка 9 означає, що на зображенні зображено цифру 9.\n",
        "\n",
        "Після перетворення за допомогою функції to_categorical кожна така мітка стала вектором з 10 елементів, де:\n",
        "\n",
        "Всі елементи — це нулі, крім одного елемента з індексом, що відповідає мітці.\n",
        "\n",
        "Наприклад, мітка 9 стала вектором [0. 0. 0. 0. 0. 0. 0. 0. 0. 1.] — одиниця на 10-й позиції (індекс 9).\n",
        "\n"
      ],
      "metadata": {
        "id": "WtcwbrJkCKTm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4) Розділимо дані та тестову тв тренувальну"
      ],
      "metadata": {
        "id": "-k0Qik7cCUCS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_X,valid_X,train_label,valid_label = train_test_split(train_X,\n",
        "train_Y_one_hot, test_size=0.2, random_state=13)"
      ],
      "metadata": {
        "id": "jei0EM-gCJqM"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5) Перевіримо форму набору для навчання та перевірки."
      ],
      "metadata": {
        "id": "YE1KXoMHCcXy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_X.shape,valid_X.shape,train_label.shape,valid_label.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1XkTdw95Cd7e",
        "outputId": "17730fc7-c028-4f62-edf7-cbf92dcba393"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((48000, 28, 28, 1), (12000, 28, 28, 1), (48000, 10), (12000, 10))"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Це означає, що дані розділено на навчальну та валідаційну частини. Під час тренування нейронної мережі модель навчається на 48 000 зразках (train_X) і одночасно перевіряє, як добре вона працює на валідаційному наборі з 12 000 зразків (valid_X). Це дозволяє відстежувати якість навчання та уникати перенавчання (overfitting).\n",
        "\n",
        "Також усі мітки вже перетворені у формат one-hot encoding, готовий для використання в нейронній мережі з функцією втрат, наприклад categorical_crossentropy.\n",
        "\n"
      ],
      "metadata": {
        "id": "EHQYuoTSChN9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Нейронна мережа. Змоделюйте дані"
      ],
      "metadata": {
        "id": "qeWKakjOC2af"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Імпортуємо необхідні бібліотеки"
      ],
      "metadata": {
        "id": "qHwoTv5hDNCI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keras\n"
      ],
      "metadata": {
        "id": "lAUTFDjNDKTo"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import Sequential, Model\n",
        "from keras.layers import Input, Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization, LeakyReLU\n"
      ],
      "metadata": {
        "id": "248h24dKCyLG"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 64\n",
        "epochs = 20\n",
        "num_classes = 10\n"
      ],
      "metadata": {
        "id": "NDtzGjW9D8Tb"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Архітектура нейронної мережі"
      ],
      "metadata": {
        "id": "Mhvbh5AeEJuy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_model = Sequential()\n",
        "\n",
        "fashion_model.add(Conv2D(32, kernel_size=(3,3), activation='linear', input_shape=(28,28,1), padding='same'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(MaxPooling2D((2, 2), padding='same'))\n",
        "\n",
        "fashion_model.add(Conv2D(64, (3, 3), activation='linear', padding='same'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n",
        "\n",
        "fashion_model.add(Conv2D(128, (3, 3), activation='linear', padding='same'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(MaxPooling2D(pool_size=(2, 2), padding='same'))\n",
        "\n",
        "fashion_model.add(Flatten())\n",
        "fashion_model.add(Dense(128, activation='linear'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "\n",
        "fashion_model.add(Dense(num_classes, activation='softmax'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X_iLtBLSETiH",
        "outputId": "7d25f9c8-7519-44b2-fdac-89feb255eb7b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/activations/leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Модель приймає чорно-біле зображення 28x28 пікселів, Використовує кілька згорткових шарів для виділення ознак, Переходить до повнозв’язного шару для класифікації, повертає ймовірності належності до кожного з класів."
      ],
      "metadata": {
        "id": "OfSl_oj6Ep46"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Компіляція моделі\n"
      ],
      "metadata": {
        "id": "3VJydPkmEqRs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Після створення моделі компілюйте її за допомогою оптимізатора Adam,  одного з найпопулярніших алгоритмів оптимізації. Вкажіть тип втрат, який є  категоріальною перехресною ентропією, що використовується для  багатокласової класифікації, також можна використовувати двійкову  перехресну ентропію як функцію втрат. Вкажіть метрику як точність, яку  хочете проаналізувати під час навчання моделі."
      ],
      "metadata": {
        "id": "d9BC64O0FETg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n"
      ],
      "metadata": {
        "id": "41yCm0xzE5Ps"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) Вконайте візуалізацію шарів"
      ],
      "metadata": {
        "id": "WQG4HLn7FLOP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "BtHbmqn3FL47",
        "outputId": "272f20fe-8c98-44d8-83d3-2d514f3cf7b7"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu (\u001b[38;5;33mLeakyReLU\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_1 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │        \u001b[38;5;34m73,856\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_2 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m262,272\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_3 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">262,272</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m356,234\u001b[0m (1.36 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,234</span> (1.36 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m356,234\u001b[0m (1.36 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,234</span> (1.36 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Цей результат показує структуру побудованої згорткової нейронної мережі, яку ми створили за допомогою Keras. Модель має послідовну архітектуру, яка складається з 12 шарів. Кожен шар виконує певну роль у процесі обробки зображення 28×28 пікселів і класифікації його до одного з 10 класів.\n",
        "\n",
        "Conv2D (32 фільтри) — перший згортковий шар із 32 фільтрами розміром 3×3, який аналізує вхідне зображення. Після нього вихід має форму (28, 28, 32). Цей шар має 320 параметрів, які будуть навчатись.\n",
        "\n",
        "LeakyReLU — додає нелінійність до моделі. Параметрів для навчання не має.\n",
        "\n",
        "MaxPooling2D — зменшує розмір зображення вдвічі, до (14, 14, 32).\n",
        "\n",
        "Conv2D (64 фільтри) — другий згортковий шар із виходом (14, 14, 64) і 18,496 параметрами.\n",
        "\n",
        "LeakyReLU — знову вводить нелінійність, без параметрів.\n",
        "\n",
        "MaxPooling2D — зменшує розмір до (7, 7, 64).\n",
        "\n",
        "Conv2D (128 фільтрів) — третій згортковий шар із виходом (7, 7, 128) і 73,856 параметрами.\n",
        "\n",
        "LeakyReLU — нелінійна активація.\n",
        "\n",
        "MaxPooling2D — ще раз зменшує розмір до (4, 4, 128).\n",
        "\n",
        "Flatten — перетворює 3D-вихід у 1D-вектор з 2048 елементів.\n",
        "\n",
        "Dense (128 нейронів) — щільний шар з 128 нейронами та 262,272 параметрами. Тут модель починає \"розуміти\" ознаки зображень на абстрактному рівні.\n",
        "\n",
        "LeakyReLU — нелінійна функція активації.\n",
        "\n",
        "Dense (10 нейронів) — фінальний шар, який відповідає за класифікацію на 10 класів. Має 1,290 параметрів, а на виході дає ймовірності для кожного класу."
      ],
      "metadata": {
        "id": "0MVbc_OWFadO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Тренування моделі"
      ],
      "metadata": {
        "id": "6bHZvUcIFerm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_train = fashion_model.fit(train_X, train_label,\n",
        "batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zhd0Gr72Fldt",
        "outputId": "9e56cc0f-a0a4-4ebd-ad52-a81bfc274e78"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 121ms/step - accuracy: 0.7530 - loss: 0.6654 - val_accuracy: 0.8802 - val_loss: 0.3272\n",
            "Epoch 2/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 121ms/step - accuracy: 0.8901 - loss: 0.3005 - val_accuracy: 0.8931 - val_loss: 0.2838\n",
            "Epoch 3/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m146s\u001b[0m 127ms/step - accuracy: 0.9096 - loss: 0.2413 - val_accuracy: 0.8988 - val_loss: 0.2676\n",
            "Epoch 4/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m159s\u001b[0m 150ms/step - accuracy: 0.9234 - loss: 0.2088 - val_accuracy: 0.9059 - val_loss: 0.2573\n",
            "Epoch 5/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m134s\u001b[0m 139ms/step - accuracy: 0.9327 - loss: 0.1823 - val_accuracy: 0.9160 - val_loss: 0.2360\n",
            "Epoch 6/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m135s\u001b[0m 130ms/step - accuracy: 0.9419 - loss: 0.1604 - val_accuracy: 0.9159 - val_loss: 0.2337\n",
            "Epoch 7/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 131ms/step - accuracy: 0.9463 - loss: 0.1406 - val_accuracy: 0.9209 - val_loss: 0.2291\n",
            "Epoch 8/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 131ms/step - accuracy: 0.9563 - loss: 0.1201 - val_accuracy: 0.9217 - val_loss: 0.2323\n",
            "Epoch 9/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 134ms/step - accuracy: 0.9645 - loss: 0.0966 - val_accuracy: 0.9170 - val_loss: 0.2633\n",
            "Epoch 10/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 120ms/step - accuracy: 0.9691 - loss: 0.0863 - val_accuracy: 0.9218 - val_loss: 0.2615\n",
            "Epoch 11/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m146s\u001b[0m 126ms/step - accuracy: 0.9744 - loss: 0.0692 - val_accuracy: 0.9214 - val_loss: 0.2887\n",
            "Epoch 12/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m138s\u001b[0m 121ms/step - accuracy: 0.9780 - loss: 0.0579 - val_accuracy: 0.9153 - val_loss: 0.3223\n",
            "Epoch 13/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 120ms/step - accuracy: 0.9808 - loss: 0.0513 - val_accuracy: 0.9172 - val_loss: 0.3493\n",
            "Epoch 14/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m148s\u001b[0m 129ms/step - accuracy: 0.9835 - loss: 0.0470 - val_accuracy: 0.9199 - val_loss: 0.3428\n",
            "Epoch 15/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m96s\u001b[0m 128ms/step - accuracy: 0.9852 - loss: 0.0384 - val_accuracy: 0.9214 - val_loss: 0.3626\n",
            "Epoch 16/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 127ms/step - accuracy: 0.9877 - loss: 0.0346 - val_accuracy: 0.9176 - val_loss: 0.3927\n",
            "Epoch 17/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m139s\u001b[0m 123ms/step - accuracy: 0.9884 - loss: 0.0307 - val_accuracy: 0.9183 - val_loss: 0.3871\n",
            "Epoch 18/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m147s\u001b[0m 129ms/step - accuracy: 0.9900 - loss: 0.0263 - val_accuracy: 0.9165 - val_loss: 0.4306\n",
            "Epoch 19/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m135s\u001b[0m 120ms/step - accuracy: 0.9901 - loss: 0.0267 - val_accuracy: 0.9216 - val_loss: 0.4360\n",
            "Epoch 20/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 121ms/step - accuracy: 0.9915 - loss: 0.0247 - val_accuracy: 0.9150 - val_loss: 0.5091\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Ми навчали модель на наборі даних fashion-MNIST протягом 20 епох, і,  спостерігаючи за точністю навчання та втратами, можна сказати, що модель  добре попрацювала, оскільки після 20 епох точність навчання становить  близко 99%, а втрата навчання досить низька.\n",
        "Однак схоже, що модель перенавчена, оскільки втрата підтвердження  становить 0,4396, а точність перевірки становить 92%. Перенавчання означає,  що мережа дуже добре запам’ятала навчальні дані, але не гарантує, що вона  працюватиме з невидимими даними, і саме тому існує різниця в точності  навчання та перевірки. Модель можна зробти ефективнішою, додавши шар  Dropout в мережу і залишивши всі інші шари без змін. Але спочатку потрібно  оцінити продуктивність моделі на тестовому наборі, перш ніж зробити  висновок.\n"
      ],
      "metadata": {
        "id": "5379WTzOcQiI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Оцінка моделі на тестовому наборі\n"
      ],
      "metadata": {
        "id": "gODp8WK_cbrr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Протестуємо модель на тестових даних"
      ],
      "metadata": {
        "id": "rBTbq31wcp3o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_eval = fashion_model.evaluate(test_X, test_Y_one_hot, verbose=0)\n",
        "print('Test loss:', test_eval[0])\n",
        "print('Test accuracy:', test_eval[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iyuJB4pibj6z",
        "outputId": "c5841f0f-8e4f-47ab-e507-66c09e88cdbc"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test loss: 0.5008152723312378\n",
            "Test accuracy: 0.916700005531311\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: У результаті тестування згорткової нейронної мережі було отримано значення функції втрат (loss) — 0.5008, а точність класифікації (accuracy) склала 91.67%. Це свідчить про те, що модель досить добре навчилася розпізнавати зображення (або інші вхідні дані, залежно від задачі), адже точність понад 90% вважається хорошим результатом для більшості задач класифікації. Водночас значення функції втрат вказує, що є ще можливості для подальшого покращення — наприклад, за допомогою оптимізації архітектури моделі, збільшення кількості навчальних даних або налаштування гіперпараметрів.\n",
        "\n",
        "Загалом, отримані результати можна вважати хорошими, особливо якщо модель працює стабільно на тестових даних і не демонструє перенавчання."
      ],
      "metadata": {
        "id": "xTuWNrIcchC9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) Розглянемо модель оцінки в перспективі та побудуйте графіки точності та  втрат між даними навчання та перевірки"
      ],
      "metadata": {
        "id": "37hKsk-Ecs1T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = fashion_train.history['accuracy']\n",
        "val_accuracy = fashion_train.history['val_accuracy']\n",
        "loss = fashion_train.history['loss']\n",
        "val_loss = fashion_train.history['val_loss']\n",
        "epochs = range(len(accuracy))\n",
        "\n",
        "plt.plot(epochs, accuracy, 'bo', label='Training accuracy')\n",
        "plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 887
        },
        "id": "vuvjHO2fcyha",
        "outputId": "a7f59067-0aaa-4c57-86aa-25396b2f8e33"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: З отриманих двох графіків можна побачити, що точність підтвердження  майже стагнувала через 4-5 епохи і рідко збільшувалася в певні епохи. Спочатку точність перевірки лінійно збільшувалася зі втратами, але потім  не сильно зросла. Втрата перевірки показує, що це ознака перенавчання,  подібно до точності перевірки, лінійно зменшувалася, але через 4-5 епох\n",
        "31\n",
        "почала збільшуватися. Це означає, що модель спробувала запам’ятати дані і  досягла успіху. Маючи це на увазі, настав час ввести деяку кількість випадів у  нашу модель і подивитися, чи допоможе це зменшити перенавчання.\n"
      ],
      "metadata": {
        "id": "Qp4xIpQYc1q-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Додавання Dropout до нейронної мережі\n"
      ],
      "metadata": {
        "id": "yrkJBOfYc5fu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Тож знову створимо, компілюйте та навчайте мережу, але цього разу з  використанням Dropout. І запустітимо його протягом 20 епох із розміром партії  64."
      ],
      "metadata": {
        "id": "OusiiOgpdDfF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 64\n",
        "epochs = 20\n",
        "num_classes = 10\n",
        "fashion_model = Sequential()\n",
        "fashion_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',padding='same',input_shape=(28,28,1)))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(MaxPooling2D((2, 2),padding='same'))\n",
        "fashion_model.add(Dropout(0.25))\n",
        "fashion_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\n",
        "fashion_model.add(Dropout(0.25))\n",
        "fashion_model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "32\n",
        "fashion_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))\n",
        "fashion_model.add(Dropout(0.4))\n",
        "fashion_model.add(Flatten())\n",
        "fashion_model.add(Dense(128, activation='linear'))\n",
        "fashion_model.add(LeakyReLU(alpha=0.1))\n",
        "fashion_model.add(Dropout(0.3))\n",
        "fashion_model.add(Dense(num_classes, activation='softmax'))\n",
        "fashion_model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 783
        },
        "id": "uX0S2cq7c32h",
        "outputId": "81b74a05-6892-4e0c-e629-15e24edcb7a0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/activations/leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_4 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_5 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_4 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_5 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │        \u001b[38;5;34m73,856\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_6 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_5 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m262,272\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_7 (\u001b[38;5;33mLeakyReLU\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">262,272</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ leaky_re_lu_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LeakyReLU</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m356,234\u001b[0m (1.36 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,234</span> (1.36 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m356,234\u001b[0m (1.36 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">356,234</span> (1.36 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висново:Отримана модель показала тестову точність 91.67% та втрати (loss) — 0.5008. Це означає, що вона успішно навчилась розпізнавати візуальні патерни у даних, і здатна з досить високою ймовірністю правильно класифікувати нові приклади.\n"
      ],
      "metadata": {
        "id": "8COJ3K_rdSaw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2)"
      ],
      "metadata": {
        "id": "6SMJ7o-9defp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])\n",
        "fashion_train_dropout = fashion_model.fit(train_X, train_label,\n",
        "batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8TkU4otxdUDo",
        "outputId": "86c9f586-8b0d-42cb-d0e1-10f8b2f840f1"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m109s\u001b[0m 141ms/step - accuracy: 0.6817 - loss: 0.8640 - val_accuracy: 0.8696 - val_loss: 0.3724\n",
            "Epoch 2/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m132s\u001b[0m 127ms/step - accuracy: 0.8578 - loss: 0.3892 - val_accuracy: 0.8802 - val_loss: 0.3192\n",
            "Epoch 3/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m148s\u001b[0m 136ms/step - accuracy: 0.8794 - loss: 0.3309 - val_accuracy: 0.8976 - val_loss: 0.2797\n",
            "Epoch 4/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 130ms/step - accuracy: 0.8862 - loss: 0.3067 - val_accuracy: 0.9013 - val_loss: 0.2673\n",
            "Epoch 5/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 129ms/step - accuracy: 0.8961 - loss: 0.2799 - val_accuracy: 0.9068 - val_loss: 0.2519\n",
            "Epoch 6/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 137ms/step - accuracy: 0.9024 - loss: 0.2656 - val_accuracy: 0.9091 - val_loss: 0.2421\n",
            "Epoch 7/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m97s\u001b[0m 129ms/step - accuracy: 0.9048 - loss: 0.2530 - val_accuracy: 0.9157 - val_loss: 0.2296\n",
            "Epoch 8/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 129ms/step - accuracy: 0.9096 - loss: 0.2409 - val_accuracy: 0.9144 - val_loss: 0.2317\n",
            "Epoch 9/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 130ms/step - accuracy: 0.9103 - loss: 0.2414 - val_accuracy: 0.9193 - val_loss: 0.2228\n",
            "Epoch 10/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 129ms/step - accuracy: 0.9143 - loss: 0.2319 - val_accuracy: 0.9099 - val_loss: 0.2456\n",
            "Epoch 11/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 132ms/step - accuracy: 0.9170 - loss: 0.2251 - val_accuracy: 0.9202 - val_loss: 0.2191\n",
            "Epoch 12/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 130ms/step - accuracy: 0.9141 - loss: 0.2217 - val_accuracy: 0.9171 - val_loss: 0.2305\n",
            "Epoch 13/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m105s\u001b[0m 140ms/step - accuracy: 0.9181 - loss: 0.2164 - val_accuracy: 0.9243 - val_loss: 0.2144\n",
            "Epoch 14/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m138s\u001b[0m 135ms/step - accuracy: 0.9183 - loss: 0.2184 - val_accuracy: 0.9262 - val_loss: 0.2086\n",
            "Epoch 15/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m138s\u001b[0m 129ms/step - accuracy: 0.9221 - loss: 0.2049 - val_accuracy: 0.9228 - val_loss: 0.2195\n",
            "Epoch 16/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m98s\u001b[0m 130ms/step - accuracy: 0.9233 - loss: 0.2054 - val_accuracy: 0.9263 - val_loss: 0.2125\n",
            "Epoch 17/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 133ms/step - accuracy: 0.9203 - loss: 0.2080 - val_accuracy: 0.9264 - val_loss: 0.2148\n",
            "Epoch 18/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 135ms/step - accuracy: 0.9226 - loss: 0.1988 - val_accuracy: 0.9275 - val_loss: 0.2062\n",
            "Epoch 19/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 137ms/step - accuracy: 0.9281 - loss: 0.1927 - val_accuracy: 0.9242 - val_loss: 0.2135\n",
            "Epoch 20/20\n",
            "\u001b[1m750/750\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 136ms/step - accuracy: 0.9245 - loss: 0.1998 - val_accuracy: 0.9284 - val_loss: 0.2112\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок:  В порівнянні з попереднім експериментом точність дещо погіршилась"
      ],
      "metadata": {
        "id": "qe52pr7pdWxJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3)Збережемо модель"
      ],
      "metadata": {
        "id": "fp2KlB5JdgtC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fashion_model.save(\"fashion_model_dropout.h5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OungBjurdipn",
        "outputId": "4906731d-e030-474d-cbe4-1befd99d3491"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Оцінка моделі на тестовому наборі"
      ],
      "metadata": {
        "id": "KIuZISQidmui"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Оцінимо модель"
      ],
      "metadata": {
        "id": "kKyQIBt_dqwU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_eval = fashion_model.evaluate(test_X, test_Y_one_hot, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c2xNerpOdsbm",
        "outputId": "31b10490-92a7-4fd2-d095-8599dcbe7dfd"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 18ms/step - accuracy: 0.9207 - loss: 0.2339\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: точність тановить 92% що є досить високим показником та може свідчити про якість прогнозування\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "xVbRSWaBdw1L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) порахуємо похибку"
      ],
      "metadata": {
        "id": "QP6iLEOvdysJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('Test loss:', test_eval[0])\n",
        "print('Test accuracy:', test_eval[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AQ3-Z8Hkdxkn",
        "outputId": "c6382f78-4b09-42c0-9bc2-daf3a339233b"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test loss: 0.22360657155513763\n",
            "Test accuracy: 0.921500027179718\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Після тестування моделі було отримано наступні результати:\n",
        "\n",
        "Test loss: 0.2236\n",
        "\n",
        "Test accuracy: 92.15%\n",
        "\n",
        "Ці результати свідчать про те, що модель добре узагальнює знання і здатна з високою точністю класифікувати нові зображення з тестового набору. Точність понад 92% є відмінним результатом для більшості задач класифікації, що вказує на хорошу якість моделі.\n",
        "\n",
        "Значення функції втрат (loss) 0.2236 також є достатньо низьким, що підтверджує, що модель добре навчається і здатна мінімізувати помилки при класифікації.\n",
        "\n",
        "Загалом, модель продемонструвала високі результати на тестових даних, і можна вважати, що вона працює ефективно для поставленої задачі."
      ],
      "metadata": {
        "id": "BuuC3ugxd6Ei"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) В останній раз побудуємо графіки точності та втрат між даними  навчання та перевірки."
      ],
      "metadata": {
        "id": "5ET1hkD_d-0K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = fashion_train_dropout.history['accuracy']\n",
        "val_accuracy = fashion_train_dropout.history['val_accuracy']\n",
        "loss = fashion_train_dropout.history['loss']\n",
        "val_loss = fashion_train_dropout.history['val_loss']\n",
        "epochs = range(len(accuracy))\n",
        "\n",
        "plt.plot(epochs, accuracy, 'bo', label='Training accuracy')\n",
        "plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 887
        },
        "id": "0-p4fbvJd5L1",
        "outputId": "ab4e7a4a-1d0c-40d8-db71-8b47666e4d77"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: можна побачити, що втрата перевірки та точність перевірки  синхронізовані з втратою та точністю навчання. Незважаючи на те, що втрата  перевірки та лінія точності не є лінійною, вона показує, що модель не  перенавчена: втрата перевірки зменшується, а не збільшується, і немає  великого розриву між навчанням і точністю перевірки. Таким чином, здатність моделі до узагальнення стала набагато кращою,  оскільки втрата як тестового набору, так і набору перевірки була лише трохи  більше в порівнянні з втратою навчання.\n",
        "\n"
      ],
      "metadata": {
        "id": "rhjg7D_neEEF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Прогнозування міток"
      ],
      "metadata": {
        "id": "-P0xnfETeUJx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_classes = fashion_model.predict(test_X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzFp-ebYeVUv",
        "outputId": "f9d86d60-4db2-4545-bf73-149353aa7907"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 18ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) Оскільки отримані прогнози є значеннями з плаваючою крапкою,  порівняти передбачені мітки з істинними тестовими мітками буде неможливо.  Таким чином, потрібно заокруглити результат, який перетворить значення з  плаваючою крапкою в ціле число. Потрібно використати np.argmax(), щоб  вибрати номер індексу, який має вище значення в рядку. Наприклад,  припустимо, що для одного тестового зображення передбачено значення 0 1 0  0 0 0 0 0 0 0, вихід для цього має бути міткою класу 1.\n"
      ],
      "metadata": {
        "id": "y-w5A3swelPi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "predicted_classes = np.argmax(np.round(predicted_classes),axis=1)\n",
        "predicted_classes.shape, test_Y.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SNeIiPWPemHx",
        "outputId": "94187a10-d6b5-4f0b-82a3-307455490e34"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((10000,), (10000,))"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Який результат ви отримали?\n"
      ],
      "metadata": {
        "id": "JJBsIH_Pepux"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "correct = np.where(predicted_classes == test_Y)[0]\n",
        "print(\"Found {} correct labels\".format(len(correct)))\n",
        "\n",
        "for i, correct_idx in enumerate(correct[:9]):\n",
        "    plt.subplot(3, 3, i + 1)\n",
        "    plt.imshow(test_X[correct_idx].reshape(28, 28), cmap='gray', interpolation='none')\n",
        "    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[correct_idx], test_Y[correct_idx]))\n",
        "    plt.tight_layout()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "2xeW0dDaet-s",
        "outputId": "dae926d2-9d9b-46ab-b3e4-cf128929998c"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 9193 correct labels\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок: Який результат ви отримали?\n"
      ],
      "metadata": {
        "id": "c8QpZWhHerke"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "incorrect = np.where(predicted_classes != test_Y)[0]\n",
        "print(\"Found {} incorrect labels\".format(len(incorrect)))\n",
        "\n",
        "for i, incorrect_idx in enumerate(incorrect[:9]):\n",
        "    plt.subplot(3, 3, i + 1)\n",
        "    plt.imshow(test_X[incorrect_idx].reshape(28, 28), cmap='gray', interpolation='none')\n",
        "    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[incorrect_idx], test_Y[incorrect_idx]))\n",
        "    plt.tight_layout()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "BhPqyuibe3Om",
        "outputId": "c5a838d1-ca79-49ff-d9f8-f3c81aed5c1c"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 807 incorrect labels\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок:\n",
        "Подивившись на кілька зображень, ми не можемо бути впевнені, чому  модель не в змозі правильно класифікувати наведені вище зображення, але  різноманітність подібних шаблонів, наявних у кількох класах, впливає на  продуктивність класифікатора CNN. Наприклад, зображення 5 і 6 належать до  різних класів, але схожі, наприклад, піджак або, можливо, сорочка з довгим  рукавом.\n"
      ],
      "metadata": {
        "id": "NJFQM492e5el"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Звіт про класифікацію"
      ],
      "metadata": {
        "id": "nNB__VkwfCYn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "target_names = [\"Class {}\".format(i) for i in range(num_classes)]\n",
        "print(classification_report(test_Y, predicted_classes,\n",
        "target_names=target_names))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PrDpY-gdfHoT",
        "outputId": "1650854d-1da1-4ba3-f22f-de11ce510a5c"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "     Class 0       0.79      0.91      0.85      1000\n",
            "     Class 1       0.99      0.99      0.99      1000\n",
            "     Class 2       0.88      0.88      0.88      1000\n",
            "     Class 3       0.93      0.91      0.92      1000\n",
            "     Class 4       0.89      0.86      0.87      1000\n",
            "     Class 5       0.98      0.98      0.98      1000\n",
            "     Class 6       0.80      0.75      0.78      1000\n",
            "     Class 7       0.96      0.97      0.97      1000\n",
            "     Class 8       0.99      0.98      0.99      1000\n",
            "     Class 9       0.97      0.96      0.97      1000\n",
            "\n",
            "    accuracy                           0.92     10000\n",
            "   macro avg       0.92      0.92      0.92     10000\n",
            "weighted avg       0.92      0.92      0.92     10000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Висновок:\n",
        "Ви можете помітити, що класифікатор недостатньо ефективний для  класу 6 як щодо точності, так і щодо запам’ятовування. Для класу 0 і класу 2  класифікатору не вистачає точності. Крім того, для класу 4 класифікатору не  вистачає точності та запам’ятовування.\n",
        "\n",
        "Результати оцінки моделі за допомогою метрики classification_report показують гарну загальну ефективність класифікації на тестовому наборі даних, з середньою точністю (accuracy) 0.92 для всіх класів. Ось основні спостереження:\n",
        "\n",
        "Точність (Precision): Для більшості класів точність вище 0.8, що свідчить про хорошу здатність моделі правильно класифікувати об'єкти.\n",
        "\n",
        "Повнота (Recall): Повнота також на високому рівні, особливо для класів 1, 5 та 8, що свідчить про здатність моделі правильно знаходити більшість об'єктів для цих класів.\n",
        "\n",
        "Збалансованість: Модель має хорошу збалансованість між точністю та повнотою для більшості класів, особливо для класів 1, 5 та 8, де f1-міра наближається до 1.\n",
        "\n",
        "Загалом, модель показала стабільні результати по всіх класах з хорошими показниками точності, повноти та F1-міри, що вказує на її ефективність у класифікації.\n"
      ],
      "metadata": {
        "id": "nxLW_uVWfIIE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Висновок\n",
        "\n"
      ],
      "metadata": {
        "id": "6Og29nwt2nwv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "У процесі роботи над побудовою та оцінкою моделі згорткової нейронної мережі (CNN) для класифікації зображень з набора даних Fashion-MNIST було досягнуто значних результатів.\n",
        "\n",
        "Модель: Використовувалась згорткова нейронна мережа, яка включала кілька шарів згортки, максимального об'єднання та шару dropout для запобігання перенавчанню. Мережа продемонструвала високу точність при навчанні та тестуванні.\n",
        "\n",
        "Результати: На основі результатів, отриманих на тестовому наборі, точність класифікації досягла 92%, що є хорошим показником для задачі класифікації зображень. Усі класи показали хорошу точність і повноту, зокрема класи з точністю та F1-мірою близькими до 1.\n",
        "\n",
        "Оцінка якості: Згідно з метриками, такими як точність (precision), повнота (recall) та F1-міра, модель продемонструвала збалансовану здатність правильно класифікувати об'єкти та знаходити їх. Найкращі результати були досягнуті для деяких класів, таких як клас 1, 5 та 8, з високими значеннями F1-міри.\n",
        "\n",
        "Подальші покращення: Для покращення результатів можна експериментувати з іншими параметрами моделі, такими як кількість фільтрів у шарах згортки, різні функції активації, або розширенням набору даних через техніки аугментації. Також можливе використання більш складних архітектур, таких як ResNet чи VGG.\n",
        "\n",
        "Загалом, модель продемонструвала високу ефективність для завдання класифікації зображень і може бути використана для реальних застосунків, де важлива точність класифікації зображень, таких як розпізнавання одягу в інтернет-магазинах чи інші подібні завдання."
      ],
      "metadata": {
        "id": "y80ntPfyyvxL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Питання для самоперевірки\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AA7wMKSrQARe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Назвіть основні складові базового штучного нейрону, які функції вони  виконують?\n",
        "\n",
        "Усі штучні нейромережі конструюються з базового формуючого блоку –  штучного нейрону, що моделює основні функції природного нейрона. При  функціонуванні штучний нейрон одночасно отримує багато вхідних сигналів.  Кожен вхід має власний коефіцієнт, що називається синаптичною вагою і  моделює різноманітні синаптичні з’єднання біологічних нейронів. Ваговий  коефіцієнт збільшує або зменшує значення входу, тому, ваги суттєвого входу  підсилюються і, навпаки, вага несуттєвого входу примусово зменшується, що  визначає інтенсивність вхідного сигналу. Ваги можуть змінюватись  відповідно до навчальних прикладів, топології мережі та навчальних правил.\n",
        "1\n",
        "Вхідні сигнали xn помножені на вагові коефіцієнти з'єднання wn додаються (блок суматора), проходять через передатну функцію та генерують  результат.\n",
        "\n",
        "\n",
        "2. Яким чином працює блок суматора, які функції він може використовувати?\n",
        "\n",
        "Модифіковані входи (зважені синаптичними коефіцієнтами) надходять  до блока суматора, де, можна не лише додавати входи, а й виконати інші  операції, наприклад, обрати середнє, найбільше чи найменше значення входів,  здійснити логічні операції AND чи OR, або виконати інші функції.  \n",
        "Іноді до блоку суматора додається функції активації, яка дозволяє функції  суматора зміщуватися в часі. Значення, що спродуковано в блоці суматора  надсилається до передатної функції, яка за допомогою певного алгоритму,  обмежує вихід в певному діапазоні, наприклад, [0 ÷ 1] чи [-1÷1]. В існуючих  нейромережах в якості передатних функцій можуть бути використані  сигмоїда, синус, гіперболічний тангенс та ін.\n",
        "\n",
        "3. Що означає термін \"глибоке навчання\"?\n",
        "\n",
        "Глибоке навчання (deep learning) – це сукупність алгоритмів, що  використовуються у машинному навчанні для моделювання абстракцій  високого рівня даних за допомогою моде\n",
        "\n",
        "\n",
        "4. Дайте визначення згортковим нейронним мережам.\n",
        "\n",
        "\n",
        "Згорткова нейронна мережа утворює клас штучних нейронних мереж,  який став домінуючим у різних задачах комп’ютерного зору. CNN розроблено  для автоматичного та адаптивного вивчення просторової ієрархії функцій за  допомогою кількох будівельних блоків, таких як шари згортки, шари  об’єднання та повністю пов’язані шари.\n",
        "Перші два, шари згортки та об’єднання, виконують вилучення ознак, тоді  як третій, повністю пов’язаний шар, відображає вилучені об’єкти в кінцевий  результат, наприклад, класифікацію. Рівень згортки відіграє ключову роль у  CNN та складається з набору математичних операцій, таких як згортка  (спеціалізований тип лінійної операції).\n",
        "\n",
        "\n",
        "5. У яких реальних дослідженнях дослідженнях використовуються мережі  CNN?\n",
        "\n",
        "\n",
        "У 2012 році Алекс Крижевський використовував згорткові нейронні  мережі, щоб виграти конкурс ImageNet, зменшивши помилку класифікації з  26% до 15%. Конкурс ImageNet Large Scale Visual Recognition Challenge  (ILSVRC) розпочався в 2010 році, у цьому конкурсі дослідницькі групи\n",
        "10\n",
        "оцінюють свої алгоритми на заданому наборі даних і змагаються за досягнення  більшої точності для кількох задач візуального розпізнавання.  \n",
        "\n",
        "\n",
        "6. Яка архітектура згорткової нейронної мережі?\n",
        "\n",
        "\n",
        "CNN натхненні біологічною зоровою корою людини. У корі є невеликі  ділянки клітин, чутливі до певних ділянок поля зору. Ця ідея була розширена  з експериментом, проведеним Хубелем і Візелем у 1962 році. У цьому  експерименті дослідники показали, що деякі окремі нейрони в мозку  активувалися або запускалися лише за наявності країв певної орієнтації,  наприклад, вертикальних або горизонтальних країв.  \n",
        "Деякі нейрони спрацьовують, коли вони потрапляють на вертикальні краї,  а деякі – коли показують горизонтальний край. Х'юбель і Візель виявили, що  всі ці нейрони були добре упорядковані в стовпчастий спосіб і разом вони  здатні створювати візуальне сприйняття.\n",
        "\n",
        "7. Що таке згортка нейронної мережі CNN?\n",
        "\n",
        "\n",
        "Рівень згортки відіграє ключову роль у  CNN та складається з набору математичних операцій, таких як згортка  (спеціалізований тип лінійної операції).\n",
        "\n",
        "8. Що таке параметри і гіперпараметри згорткової нейронної мережі?\n",
        "\n",
        "\n",
        "Параметр – це змінна, яка автоматично оптимізується під час процесу  навчання, а гіперпараметр – це змінна, яку потрібно встановити заздалегідь.\n",
        "\n",
        "9. Які функції активації ви знаєте?\n",
        "\n",
        "\n",
        "ReLU (Rectified Linear Unit): f(x) = max(0, x)\n",
        "\n",
        "Sigmoid: f(x) = 1 / (1 + e^(-x))\n",
        "\n",
        "Tanh: f(x) = (e^x - e^-x) / (e^x + e^-x)\n",
        "\n",
        "Softmax: для багатокласової класифікації на виході\n",
        "\n",
        "10. Поясніть операцію максимального об'єднання в мережі CNN.\n",
        "\n",
        "\n",
        "Найпопулярнішою формою операції об’єднання є максимальний пул,  який витягує діянки з вхідних карт об’єктів, виводить максимальне значення у  кожному патчі та відкидає всі інші значення (рис. 3.11). На практиці зазвичай  використовується максимальне об’єднання з фільтром розміром 2×2 з кроком  2. Це зменшує розмірність у площині карт об’єктів у 2 рази. На відміну від  висоти та ширини, розмір глибини карт об’єктів залишається незмінним.\n",
        "\n",
        "\n",
        "11. Як відбувається навчання нейронної мережі CNN?\n",
        "\n",
        "\n",
        "Навчання нейронної мережі CNN – це процес пошуку ядер у шарах  згортки та ваг у повністю зв’язаних шарах, що мінімізує відмінності між  вихідними передбаченнями та заданими основними мітками істинності в  наборі навчальних даних.  \n",
        "\n",
        "12. Для чого використовуються алгоритм зворотного поширення та метод  градієнтного спуску?\n",
        "\n",
        "\n",
        "Алгоритм зворотного поширення помилки (англ. backpropagation) – це  метод, який використовується для навчання нейронних мереж, де важливу  роль відіграють функція втрат і алгоритм оптимізації градієнтного спуску.  Продуктивність моделі для певних ядер і ваг розраховується функцією втрат  шляхом прямого поширення на навчальному наборі даних, а параметри, які  можна вивчати, а саме ядра та ваги, оновлюються відповідно до значення втрат  за допомогою алгоритму зворотного поширення та градієнтного спуску.\n",
        "\n",
        "13. Що таке перенавчання моделі (Overfitting)? Як можна вирішити дану  проблему?\n",
        "\n",
        "\n",
        "Перенавчання відноситься до ситуації, коли модель вивчає статистичні  закономірності, характерні для навчального набору, тобто в кінцевому  підсумку запам’ятовує невідповідний шум замість того, щоб вивчати сигнал,  і, отже, працює менш добре на наступному новому наборі даних.\n",
        "\n",
        "Найкраще рішення для зменшення перенавчання – отримати більше  даних про тренування. Модель, навчена на більшому наборі даних, як правило,  дає кращі резутати. Інші рішення включають регуляризацію зі зменшенням  ваги, нормалізацію пакетів і збільшення даних, а також зниження  архітектурної складності.  \n",
        "\n",
        "\n",
        "14. Як реалізувати у Python навчання та тестування згорткової нейронної  мережі?\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "from tensorflow.keras.datasets import mnist\n",
        "\n",
        "# Завантаження даних\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_train = x_train[..., None] / 255.0\n",
        "x_test = x_test[..., None] / 255.0\n",
        "\n",
        "# Побудова моделі\n",
        "model = models.Sequential([\n",
        "    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D(2, 2),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "# Компіляція\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Навчання\n",
        "model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))\n",
        "\n",
        "# Тестування\n",
        "test_loss, test_acc = model.evaluate(x_test, y_test)\n",
        "print(\"Test accuracy:\", test_acc)\n",
        "\n"
      ],
      "metadata": {
        "id": "6vndgZdf0FQo"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
